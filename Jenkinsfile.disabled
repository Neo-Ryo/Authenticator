pipeline {
    agent{
        label "Crait"
    }

    environment {
        NEXUS_ADR = "nexus.neomanis.bzh:8443"
        IMAGE_NAME = sh (returnStdout: true, script: '''
            image=$(echo "${JOB_NAME}"| cut -d"/" -f2| tr "[:upper:]" "[:lower:]")
            echo "$image"
            ''').trim()
        
        // ex: VER_DEV = mondepot/dev-21.07.31-commitid
        VER_DEV = sh (returnStdout: true, script: '''
            date=$(date +"%Y.%m.%d")
            commit=$(echo "${GIT_COMMIT}"| head -c 10)
            echo "-dev:$date-$commit"
            ''').trim()
        // ex: VER_DEV = mondepot/latest
        VER_MAIN = sh (returnStdout: true, script: '''
            echo ":latest"
            ''').trim()
        TEAMS_HOOK = "https://lisibe.webhook.office.com/webhookb2/cbb338d9-0f46-459b-97b2-395df66dda9e@0faeb7d6-51a8-43e9-80c4-9c016e6262fb/JenkinsCI/38d67b299ac44b5b845210b44d87410e/0d5d09e7-2dd2-4b7e-8345-06a69da7292a"
    }
	stages {
/*
        stage ('Pre-Build') {
            steps{
                sh 'echo "Pre-Building..."'
                // Check Version
                sh 'docker --version'
            }
        }

    stage ('Test-main') {
            when{
				branch 'main'
			}
            steps{
                echo "${env.VER_MAIN}"
                sh "echo '${env.VER_MAIN}'"
                sh "echo '${env.IMAGE_NAME}'"
            }
        }

    stage ('Test-dev') {
            when{
				branch 'dev'
			}
            steps{
                echo "${env.VER_DEV}"
                sh "echo '${env.VER_DEV}'"
            }
        }
*/

		stage ('Build-if-Main') {
            when{
				branch 'main'
			}
            steps{
                sh 'echo "Building..."'
                // Launch Build
                sh "sudo docker build --tag ${env.IMAGE_NAME}${env.VER_MAIN} ."
                // Check Result
                sh "sudo docker image ls ${env.IMAGE_NAME}${env.VER_MAIN}"
                sh 'echo "Builded!"'
            }
		}
        stage ('Store-if-Main') {
            when{
				branch 'main'
			}
            steps{
			sh 'echo "Go to the Registry!"'
            sh "sudo docker tag ${env.IMAGE_NAME}${env.VER_MAIN} ${env.NEXUS_ADR}/${env.IMAGE_NAME}${env.VER_MAIN}"
            sh "sudo docker push ${env.NEXUS_ADR}/${env.IMAGE_NAME}${env.VER_MAIN}"
            sh 'echo "Update to the store... OK!"'
			}
		}
        stage ('Clean-if-Main') {
            when{
				branch 'main'
			}
            steps{
                sh 'echo "Cleaning last build"'
                // Launch Build
                sh "sudo docker image rm ${env.NEXUS_ADR}/${env.IMAGE_NAME}${env.VER_MAIN}"
                sh "sudo docker image rm ${env.IMAGE_NAME}${env.VER_MAIN}"
                sh 'echo "Clean!"'
            }
		}
       

        stage ('Build-if-Dev') {
            when{
				branch 'dev'
			}
            steps{
                sh 'echo "Building..."'
                // Launch Build
                sh "sudo docker build --tag ${env.IMAGE_NAME}${env.VER_DEV} ."
                // Check Result
                sh "sudo docker image ls ${env.IMAGE_NAME}${env.VER_DEV}"
                sh 'echo "Builded!"'
            }
		}
		stage ('Store-if-Dev') {
            when{
				branch 'dev'
			}
            steps{
			sh 'echo "Go to the Registry!"'
			//avec num������ro de version
            sh "sudo docker tag ${env.IMAGE_NAME}${env.VER_DEV} nexus.neomanis.bzh:8443/${env.IMAGE_NAME}${env.VER_DEV}"
            sh "sudo docker push ${env.NEXUS_ADR}/${env.IMAGE_NAME}${env.VER_DEV}"
            //version latest
            sh "sudo docker tag ${env.IMAGE_NAME}${env.VER_DEV} nexus.neomanis.bzh:8443/${env.IMAGE_NAME}-dev:latest"
            sh "sudo docker push ${env.NEXUS_ADR}/${env.IMAGE_NAME}-dev:latest"
            sh 'echo "Update to the store... OK!"'
			}
		}
		stage ('Clean-if-Dev') {
            when{
				branch 'dev'
			}
            steps{
                sh 'echo "Cleaning last build"'
                // Launch Build
                sh "sudo docker image rm ${env.NEXUS_ADR}/${env.IMAGE_NAME}${env.VER_DEV}"
                sh "sudo docker image rm ${env.NEXUS_ADR}/${env.IMAGE_NAME}-dev:latest"
                sh "sudo docker image rm ${env.IMAGE_NAME}${env.VER_DEV}"
                sh 'echo "Clean!"'
            }
		}

        stage ('Start CICD NeoServer') {
            steps{
			//sh 'echo "Launch CICD Docker-Compose_NeoServer!"'
            build job: '/Neo_BZH/Docker-Compose_NeoSolution/main', wait: false
            //sh 'echo "And Finish!"'
			}
		}

        
    }
    post {
        always {
            deleteDir() /* clean up our workspace */
        }
        success {
            office365ConnectorSend (
                status: "SUCCESS",
                webhookUrl: "${env.TEAMS_HOOK}",
                color: '00ff00',
                message: "Successful: ${JOB_NAME} - ${BUILD_DISPLAY_NAME}<br>Pipeline duration: ${currentBuild.durationString}"
              )
        }
        unstable {
            office365ConnectorSend (
                status: "UNSTABLE",
                webhookUrl: "${env.TEAMS_HOOK}",
                color: 'FFBB00',
                message: "Unstable: ${JOB_NAME} - ${BUILD_DISPLAY_NAME}<br>Pipeline duration: ${currentBuild.durationString}"
              )
        }
        failure {
            echo 'I failed :('
            office365ConnectorSend (
                status: "FAILED",
                webhookUrl: "${env.TEAMS_HOOK}",
                color: 'FF0000',
                message: "Failed: ${JOB_NAME} - ${BUILD_DISPLAY_NAME}<br>Pipeline duration: ${currentBuild.durationString}"
              )
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
