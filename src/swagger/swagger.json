{
  "openapi": "3.0.1",
  "info": {
    "title": "API boilerplate",
    "description": "This is the boilerplate API documentation",
    "license": {
      "name": "Neomanis"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000/"
    }
  ],
  "paths": {
    "/get-example": {
      "get": {
        "description": "GET example",
        "operationId": "getExample",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfull GET",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResponseExample"
                },
                "examples": {
                  "Response for /get-example": {
                    "value": {
                      "foo": {
                        "bar": "toto",
                        "baz": 777,
                        "grault": true
                      },
                      "qux": ["titi", "tutu", "tete"],
                      "quux": [1, "toto"],
                      "corge": [{"bla": "blub"}, {"blabla": "bla"}]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestErrorExample"
                },
                "examples": {
                  "Invalid request on /get-example": {
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Check the status of the service",
        "description": "Get service status",
        "operationId": "Status",
        "requestBody": {
          "description": "Status Object => Object{code: status.code, message: status.message}",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/ServiceStatus"
                  }
                }
              },
              "examples": {
                "Status OK": {
                  "value": {
                    "code": 200,
                    "message": "ok"
                  }
                },
                "Status Error": {
                  "value": {
                    "code": 500,
                    "message": "Some error message"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "examples": {
                  "Service ok": {
                    "value": {
                      "statusCode": 200,
                      "message": "ok"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                },
                "examples": {
                  "Service Error": {
                    "value": {
                      "statusCode": 500,
                      "message": "Some error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetResponseExample": {
        "type": "object",
        "properties": {
          "foo": {
            "properties": {
              "bar": {
                "type": "string"
              },
              "baz": {
                "type": "integer"
              },
              "grault": {
                "type": "boolean"
              }
            }
          },
          "qux": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quux": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "corge": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "bla": {
                  "type": "string"
                },
                "blabla": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ServiceStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["code", "message"]
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["statusCode", "message"]
      },
      "InvalidRequestErrorExample": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["statusCode", "message"]
      }
    }
  }
}